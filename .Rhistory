write.csv(x, "Users/danielacker/Desktop/temp.csv")
write.csv(x[1], "Users/danielacker/Desktop/temp.csv")
write.csv(x[1], "/Users/danielacker/Desktop/temp.csv")
write.csv(x[2], "/Users/danielacker/Desktop/temp2.csv")
write.csv(x[3], "/Users/danielacker/Desktop/temp3.csv")
x[1]
all[table(all)>2]
x[1]=="Anna_and_Dan"
x[[1]]=="Anna_and_Dan"
k[duplicated(k)]
L[duplicated(L)]
s[duplicated(s)]
all<-c(s,L,k)
all
all[duplicated(all)]
k[k==""]
s[s==""]
L[L==""]
all[table(all) == 3]
all[table(all)>2]
all[all=="Findaplacer"]
k[k=="Findaplacer"]
s[s=="Findaplacer"]
L[L=="Findaplacer"]
L[L=="Fefe6220"]
s[s=="Fefe6220"]
k[k=="Fefe6220"]
c(kands, Lands)[duplicated(c(kands, Lands))]
write.csv(table(all), "/Users/danielacker/Desktop/temp2.csv")
df_s
names(df_s)
df_s[["paid_member"]]
df_s[["paid_member"]] == "Free"
df_s[["paid_member"]][df_s[["paid_member"]] == "Free"]
free_idx<-df_s[["paid_member"]] == "Free"
names(df_s)
free_age<-df[["member.since"]][free_idx]
free_age<-df_s[["member.since"]][free_idx]
free_age
paid_age<-df_s[["member.since"]][!free_idx]
paid_age
write.csv(paid_age, "/Users/danielacker/Desktop/paid.csv")
write.csv(free_age, "/Users/danielacker/Desktop/free.csv")
free_date<-as.Date(free_age)
?as.Date
free_date<-as.Date(free_age, format="%m/%d/%Y")
free_date
days = as.numeric(Sys.Date() - free_date)
days
days/360
days <- as.numeric(Sys.Date() - free_date)
days
free_date
free_date<-as.Date(free_age, format="%mm/%dd/%YYYY")
free_date
free_age
free_date<-as.Date(free_age, format="%mm/%dd/%YY")
free_date
free_date<-as.Date(free_age, format="%m%m/%d%d/%Y%Y")
free_date
free_date<-as.Date(free_age, format="%m/%d/%Y")
free_date
d <- as.POSIXlt(as.Date(free_date))
d$year <- d$year-2
as.Date(d)
d <- as.POSIXlt(as.Date(free_date))
d$year <- d$year+2000
as.Date(d)
d <- as.POSIXlt(as.Date(free_date))
d$year <- d$year+2000
free_date<-as.Date(d)
as.numeric(Sys.Date() - free_date)
free_s<-as.numeric(Sys.Date() - free_date)
mean(free_s)
free_s
mean(free_s[!is.na(free_s)])
mean(free_s[!is.na(free_s)])/365
paid_date<-as.Date(paid_age, format="%m,%d,%Y")
paid_date
paid_date<-as.Date(paid_age, format="%m,%d,%YY")
paid_date
paid_date<-as.Date(paid_age, format="%mm,%dd,%YY")
paid_date
paid_date
paid_age
paid_date<-as.Date(paid_age, format="%mm/%dd/%YY")
paid_date
paid_date<-as.Date(paid_age, format="%m/%d/%Y")
paid_date
d <- as.POSIXlt(as.Date(paid_date))
d$year <- d$year+2000
paid_date<-as.Date(d)
paid_date
p_d<-as.numeric(Sys.Date() - paid_date)
p_d
p_d
p_s<-p_d
colnames(df_L)
ages<-df_L[["member.since"]]
ages
ages<-as.Date(ages, format="%m/%d/%Y")
ages
d <- as.POSIXlt(as.Date(ages))
d$year <- d$year+2000
ages<-as.Date(d)
ages
ages
d <- as.POSIXlt(as.Date(ages))
d$year <- d$year-2000
ages<-as.Date(d)
as.Date(free_age, format="%m/%d/%Y")
ages
names(df_L)
ages<-df_L[["member.since"]]
ages<-as.Date(ages, format="%m/%d/%Y")
ages
ages<-as.numeric(Sys.Date() - ages)
ages
ages/365
names(df_L)
df_L[["membership.type"]]
df_L[["membership.type"]] == "Exclusive"
p_L<-ages[df_L[["membership.type"]] == "Exclusive"]
f_L<-ages[df_L[["membership.type"]] == "Complimentary"]
f_L
mean(f_L)
mean(f_L)/365
mean(p_L)/365
mean(f_s)
f_s
p_s
mean(p_s)
mean(p_s)/365
names(df_s)
s_ages<-df_s[["member.since"]]
s_ages<-as.Date(ages, format="%m/%d/%Y")
d <- as.POSIXlt(ages.Date(ages))
d$year <- d$year + 2000
s_ages<-as.Date(d)
s_ages<-df_s[["member.since"]]
s_ages<-as.Date(ages, format="%m/%d/%Y")
d <- as.POSIXlt(ages.Date(s_ages))
d$year <- d$year + 2000
s_ages<-as.Date(d)
s_ages<-df_s[["member.since"]]
s_ages<-as.Date(s_ages, format="%m/%d/%Y")
d <- as.POSIXlt(s_ages.Date(s_ages))
d$year <- d$year + 2000
s_ages<-as.Date(d)
df[]
df_s[["member.since"]]
s_ages<-df_s[["member.since"]]
s_ages
s_ages<-as.Date(s_ages, format="%m/%d/%Y")
s_ages
d <- as.POSIXlt(s_ages.Date(s_ages))
d <- as.POSIXlt(as.Date(s_ages))
d$year <- d$year + 2000
s_ages<-as.Date(d)
s_ages
s_ages<-as.numeric(Sys.Date() - s_ages)
s_ages
names(df_s)
m<-df_s[["paid_member"""]]
m<-df_s[["paid_member"]]
m
s_f_idx<-[m == "Free"]
s_f_idx<-m == "Free"
s_f_idx
f_s<-s_ages[s_f_idx]
f_s
mean(f_s)
mean(!is.na(f_s))
mean(f_s[!is.na(f_s)])
mean(f_s[!is.na(f_s)])/365
names(df_s)
m<-df_s[["paid_member"]]
m
s_p_idx<-m == "Lifetime" | m == "Paid"
s_p_idx
p_s<-s_ages[s_p_idx]
mean(p_s)
mean(f_s)
mean(p_s)/365
?sd
sd(p_s, na.rm=T)
sd(p_s/365, na.rm=T)
sd(f_s/365, na.rm=T)
hist(f_s)
hist(f_s/365)
mean(f_L)
mean(f_L)/365
mean(p_L)/365
sd(f_L/365, na.rm=T)
sd(p_L/365, na.rm=T)
p<-c(p_L,p_s)
f<-c(f_L,f_s)
mean(p)/365
mean(f)/365
mean(f[!is.na(f)])/365
sd(f/365, na.rm=T)
sd(p/365, na.rm=T)
names(df_s)
names(df_L)
hist(p)
hist(f)
hist(p)
x
x<-c(4,6,3,1)
seq_along(x)
for (i in seq_along(x)) print(i)
for (i in 1:length(x)) { print(i) }
for (i in seq_along(x)) { print(i) }
x <- df["She.smokes"] != "" |
x <-0
x+=1
while(x<10) {x<-x+1}
x
rbinom(n,10,0.8)
rbinom(1,10,0.5)
rbinom(10,1,0.5)
rbinom(10,5,0.5)
rbinom(10,5,0.5)
rbinom(10,5,0.5)
rbinom(10,5,0.5)
rbinom(10,5,0.5)
rbinom(10,5,0.5)
rbinom(10,5,0.5)
rbinom(10,5,0.5)
plot(c(1,3,9,18))
plot(c(1,3,9,18), c(-1,-3,-9,-18))
plot(c(1,3,9,18))
x<-rbinom(100,10,0.8)
x
plot(x)
hist(x)
ggplot
?ggplot
??ggplot
library("crayon", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?crayan
?crayon
ls()
rm(ls())
?rm
remove(ls())
remove(names(ls()))
ls
rm(ls)
ls()
rm(list=ls())
ls()
plot(c(1,3,5,8,13,15,17))
line(c(1,4,6,8,9,1,3,2))
?plot.fuction
??plot.fuction
?plot.function
func <- function(x){x ** 2}
func(2)
plot.function(func,y=-1,to=1)
swirl
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5!=7
5 not == 7
5 NOT == 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |
| c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
submit()
submit()
submit()
boring_function('My
| first function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
func(dat)
evaluate(function(x){x+1}, 6)
evaluate(function(x) { x[1] }, c(8, 4, 0))
evaluate(function(x) { x[length(x)] }, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Hi", "there")
submit()
telegram("Hi", "there")
submit()
submit()
submit()
mad_libs(place="a",noun="b",adjective="c")
submit()
"I" %p% "love" %p% "R!"
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
as.POSIXlt(Sys.time())
l + 1
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$minutes
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B, %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
cube <- function(x, n) {
x^3
}
cube(3)
x<-1:10
x
if (x > 5) { }
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
wd()
pwd()
pwd
wd
list.dirs()
s<-c(11,6,4,8,7,6,4,4,7,4,2,7)
f<-c(13,5,5,4,5,4,5)
m<-cbind(f,s)
m
boxplot(f,s)
length(s)-length(f)
f<-c(f, rep(NA, times=5))
f
m<-cbind(f,s)
m
boxplot.matrix(m)
colnames(m)<- c('Fc', 'Sema4D')
m
boxplot.matrix(m)
boxplot.matrix(m, ylab='GAD65 puncta per cell')
setwd('/Users/danielacker/Desktop/Class/datasciencecoursera')
list.files()
setwd('ProgrammingAssignment2')
list.files()
makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(solve) m <<- solve
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
makeCacheMatrix()
mat<-matrix(1:6*4, nrow=6, ncol=4)
mat
makeCacheMatrix(mat)
lis<-makeCacheMatrix(mat)
lis
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get_inverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
cacheSolve(mat)
x
cacheSolve(lis)
mat<-matrix(1:16, nrow=4, ncol=4)
mat
lis<-makeCacheMatrix(mat)
lis
lis$get_inverse()
lis$get()
cacheSolve(lis)
rnorm(16)
mat<-matrix(rnorm(16), nrow=4, ncol=4)
mat
makeCacheMatrix(mat)
lis<-makeCacheMatrix(mat)
cacheSolve(lis)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$get_inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$set_inverse(inverse)
return(inverse)
}
cacheSolve(lis)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
set_inverse <- function(solve) inverse <<- solve
get_inverse <- function() inverse
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$get_inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$set_inverse(inverse)
return(inverse)
}
x<-makeCacheMatrix(mat)
x
x$get()
mat
x$get_inverse()
cacheSolve(x)
x$get_inverse()
cacheSolve(x)
x
rm(x)
